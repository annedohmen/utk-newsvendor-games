#!/usr/bin/env bash

PROJECT_ROOT="$( cd "$(dirname "${0}")/.." >/dev/null 2>&1 ; pwd -P )"
cd "${PROJECT_ROOT}"

if [ -z "$VIRTUAL_ENV" ] && [ -z "$NO_VIRTUAL_ENV" ]; then
    printf "ERROR: No virtual environment has been activated\n" >&2 && exit 1
fi

[ -z "$PYTHON" ] && PYTHON="$(which python)"
MIN_VERSION="(3, 7)"
VERSION_OK=`"$PYTHON" -c "import sys; print(sys.version_info[0:2] >= $MIN_VERSION and '1' or '');"`
if [ -z "$VERSION_OK" ] ; then
    PYTHON_VERSION=`"$PYTHON" -c "import sys; print('%s.%s' % sys.version_info[0:2]);"`
    DISP_MIN_VERSION=`"$PYTHON" -c "print('%s.%s' % $MIN_VERSION)"`
    echo "ERROR: Python $PYTHON_VERSION detected, but $DISP_MIN_VERSION+ is required."
    echo "Please upgrade your Python distribution to version $DISP_MIN_VERSION."
    exit 2
fi

if [ ! "$NO_VIRTUAL_ENV" ]; then
    if [ -z "$VIRTUAL_ENV" ] && [ ! -f "venv/bin/activate" ]; then
        # local virtual environment
        rm -rf "$PROJECT_ROOT/venv"
        echo "Making virtual environment at $PROJECT_ROOT/venv via 'python -m venv \"venv\"'"
        echo $'\n'
        python -m venv "venv"
        source "venv/bin/activate"
    elif [ -z "$VIRTUAL_ENV" ]; then
        source "venv/bin/activate"
    fi
fi

die() {
    printf 'ERROR: %s\n' "$1" >&2
    exit 1
}

green() {
    echo -e "\e[0;32m$@\e[m"
}

italic() {
    echo -e "\e[3m$@\e[m"
}

# http://understudy.net/custom.html
at_reset=$'\e[0;0;0m'
#Attributes
at_normal=$'\e[0m'
at_bold=$'\e[1m'
at_italic=$'\e[3m'
at_underline=$'\e[4m'
at_blink=$'\e[5m'
at_outline=$'\e[6m'
at_reverse=$'\e[7m'
at_nondisp=$'\e[8m'
at_strike=$'\e[9m'
at_boldoff=$'\e[22m'
at_italicoff=$'\e[23m'
at_underlineoff=$'\e[24m'
at_blinkoff=$'\e[25m'
at_reverseoff=$'\e[27m'
at_strikeoff=$'\e[29m'
#Prompt Color Table Z shell
fg_black=$'\e[0;30m'
fg_red=$'\e[0;31m'
fg_green=$'\e[0;32m'
fg_brown=$'\e[0;33m'
fg_blue=$'\e[0;34m'
fg_purple=$'\e[0;35m'
fg_cyan=$'\e[0;36m'
fg_lgray=$'\e[0;37m'
fg_dgray=$'\e[1;30m'
fg_lred=$'\e[1;31m'
fg_lgreen=$'\e[1;32m'
fg_yellow=$'\e[1;33m'
fg_lblue=$'\e[1;34m'
fg_pink=$'\e[1;35m'
fg_lcyan=$'\e[1;36m'
fg_white=$'\e[1;37m'
#Text Background Colors
bg_red=$'\e[0;41m'
bg_green=$'\e[0;42m'
bg_brown=$'\e[0;43m'
bg_blue=$'\e[0;44m'
bg_purple=$'\e[0;45m'
bg_cyan=$'\e[0;46m'
bg_gray=$'\e[0;47m'


trim() {
    if [ "${#@}" -eq 0 ]; then # assume using after pipe
        sed -E 's/^[ ]+(.*[^ ])[ ]*$/\1/g'
    else # arg usage
        sed -E 's/^[ ]+(.*[^ ])[ ]*$/\1/g' <<< ${@}
    fi
}

myjobs(){
    # cmd='ps w -o pid,ppid,uid,gid,user,stat,lstart,etime,args'
    cmd='ps w -o pid,ppid,user,stat,etime,args'
    if [ "${#@}" -eq 0 ]; then
         cmd="$cmd -U $USER"
    else
        cmd="$cmd= ${@}"
    fi
    eval "$cmd"
}


myjobs_header() {
    myjobs | head -1
}


myjobs_filtered() {
    # only meant to be used with args like: "grep server | grep -E -v 'vscode|grep'"
    # args should be quoted for safety against a possibly leading pipe, which obviously would prevent the trailing parts from entering here as arguments unless quoted/escaped
    if [ "${#@}" -gt 0 ]; then
        filters="$(echo "${@}" | sed -E 's/^([\| ]*)(.*)/\2/g')"  # but we should still remove any accidental leading pipes leading the (quoted) shell arg string
        cmd="myjobs | sed '1d' | ${filters} | grep -v grep" # and of course prepend exactly 1 pipe before $filters
    else
        cmd="myjobs | sed '1d'"
    fi
    # evaluate
    eval "${cmd}"
}

myjobs_column_endpoints() {
    hdr=$(myjobs_header)
    name=""
    names=()
    endpoints=()
    for (( i=0; i<${#hdr}; i++)); do
        char=`trim "${hdr:$i:1}"`
        # echo $char,$i
        test -z "$char"
        echo "$i; has char? `test "$?" -eq 1 && echo true`"
        if test ! -v char0; then
            if test -z "$char"; then # continue until char0 is set
                continue
            fi
            char0="$char"
            echo $char0 $i
        fi

        # if char is space, append $((i-1)) to column endpoints, append the completed column name to $names, & reset current column name
        if test "$char" = " "; then
            endpoints+=($((i-1)))
            name+=$char
            names+=($name)
            name=
        else # concat char to name
            name+=$char
        fi
    done
    echo "${names[@]}"
    # echo "Name,Endpoint"
    # for ((p=0; p<${#endpoints}; p++)); do
    #     echo "${names[$p]},${endpoints[$p]}"
    # done
}

